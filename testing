<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DVR IPTV</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { font-family: "Segoe UI", sans-serif; background: #000000; color: #fff; margin: 0; }
    header { background: #000; padding: 20px; text-align: center; border-bottom: 2px solid #ffffff; }
    header h1 { margin: 0; font-size: 32px; color: #F4320B; animation: glow 2s ease-in-out infinite alternate; }
    @keyframes glow { from { text-shadow: 0 0 5px #ffffff; } to { text-shadow: 0 0 20px #ffffff, 0 0 30px #ffffff; } }
    .topbar { display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; background: #1a1a1a; padding: 15px; }
    input, select { padding: 10px; border-radius: 6px; font-size: 16px; border: none; outline: none; }
    #channelList { display: grid; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); gap: 16px; padding: 20px; }
    .channel { background: #1f1f1f; border-radius: 12px; box-shadow: 0 4px 10px rgba(0, 255, 200, 0.05); overflow: hidden; cursor: pointer; text-align: center; padding: 12px; transition: 0.3s; }
    .channel:hover { background: #292929; transform: translateY(-4px); box-shadow: 0 6px 15px rgba(0, 255, 200, 0.1); }
    .channel img { width: 100%; height: 120px; object-fit: contain; background: #2a2a2a; border-radius: 8px; padding: 6px; }
    .channel h3 { font-size: 14px; margin: 10px 0 4px; color: #00ffc8; word-break: break-word; }
    .channel small { color: #aaa; font-size: 12px; }
    .fa-heart { margin-top: 6px; font-size: 16px; color: #888; transition: color 0.2s ease; }
    .fav { color: red !important; }
    .pagination { text-align: center; margin: 20px; }
    .pagination button { background: #00ffc8; border: none; padding: 10px 20px; margin: 0 5px; cursor: pointer; border-radius: 6px; font-weight: bold; color: #000; }
    footer { text-align: center; padding: 20px; background: #000; font-size: 14px; color: #aaa; }
    #playerContainer { text-align: center; padding: 20px; background: #000; }
    video { width: 100%; max-width: 800px; height: auto; border: 2px solid #00ffc8; border-radius: 12px; display: block; margin: auto; }
    .controls { margin-top: 10px; display: flex; justify-content: center; gap: 10px; }
    .controls select { padding: 8px; font-size: 14px; border-radius: 6px; border: none; }
  </style>
</head>
<body>

<header>
  <h1>üì° DVR IPTV</h1>
</header>

<div class="topbar">
  <input type="text" id="searchInput" placeholder="Search channel...">
  <select id="categoryFilter">
    <option value="">All Categories</option>
  </select>
</div>

<div id="playerContainer">
  <video id="player" controls autoplay></video>
  <div class="controls">
    <select id="qualitySelect">
      <option value="auto">Quality: Auto</option>
      <option value="hd">HD</option>
      <option value="sd">SD</option>
    </select>
    <select id="audioSelect">
      <option value="default">Audio: Default</option>
      <option value="track1">Audio Track 1</option>
      <option value="track2">Audio Track 2</option>
    </select>
  </div>
</div>

<div id="channelList"></div>

<div class="pagination">
  <button onclick="prevPage()">‚¨ÖÔ∏è Prev</button>
  <span id="pageInfo"></span>
  <button onclick="nextPage()">Next ‚û°Ô∏è</button>
</div>

<footer>
  üîó <a href="*****" target="_blank" style="color:#00ffc8;">@dvriptv</a> | Credit: <strong>Venkat</strong>
</footer>

<script>
let allChannels = [];
let currentPage = 1;
const itemsPerPage = 20;
let currentUrl = "";

async function loadM3U() {
  try {
    const m3uUrl = "https://1drv.ms/u/c/8571cc6dc0d3b3a3/Ee4Y7o_1Gi9AmaT3xDuRbX4B3q8Zx3rMVi3G60RimacnlA";
    const response = await fetch(m3uUrl);
    const text = await response.text();

    const channels = [];
    const lines = text.split("\n");

    let currentChannel = {};
    for (let line of lines) {
      line = line.trim();
      if (line.startsWith("#EXTINF:")) {
        const nameMatch = line.match(/,(.*)$/);
        const logoMatch = line.match(/tvg-logo="(.*?)"/);
        const groupMatch = line.match(/group-title="(.*?)"/);

        currentChannel = {
          name: nameMatch ? nameMatch[1] : "Unknown",
          logo: logoMatch ? logoMatch[1] : "",
          group: groupMatch ? groupMatch[1] : "none",
          url: ""
        };
      } else if (line && !line.startsWith("#")) {
        currentChannel.url = line;
        channels.push(currentChannel);
        currentChannel = {};
      }
    }

    allChannels = channels;
    populateCategories();
    renderChannels();
  } catch (err) {
    console.error("M3U Load Error:", err);
  }
}

function populateCategories() {
  const select = document.getElementById("categoryFilter");
  const groups = [...new Set(allChannels.map(ch => ch.group))].sort();
  groups.forEach(g => {
    const opt = document.createElement("option");
    opt.value = g;
    opt.textContent = g;
    select.appendChild(opt);
  });
}

function renderChannels() {
  const channelList = document.getElementById("channelList");
  channelList.innerHTML = "";

  const search = document.getElementById("searchInput").value.toLowerCase();
  const category = document.getElementById("categoryFilter").value;

  let filtered = allChannels.filter(ch =>
    ch.name.toLowerCase().includes(search) &&
    (category === "" || ch.group === category)
  );

  const totalPages = Math.ceil(filtered.length / itemsPerPage);
  if (currentPage > totalPages) currentPage = totalPages || 1;
  const start = (currentPage - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  const pageItems = filtered.slice(start, end);

  pageItems.forEach(ch => {
    const div = document.createElement("div");
    div.className = "channel";
    div.innerHTML = `
      <img src="${ch.logo}" alt="${ch.name}">
      <h3>${ch.name}</h3>
      <small>${ch.group}</small>
    `;
    div.onclick = () => playChannel(ch.url);
    channelList.appendChild(div);
  });

  document.getElementById("pageInfo").textContent = `Page ${currentPage} of ${totalPages}`;
}

function playChannel(url) {
  currentUrl = url;
  const player = document.getElementById("player");
  player.src = url;
  player.play();
}

function prevPage() { if (currentPage > 1) { currentPage--; renderChannels(); } }
function nextPage() { currentPage++; renderChannels(); }

// Quality selection
document.getElementById("qualitySelect").addEventListener("change", (e) => {
  if (!currentUrl) return;
  let url = currentUrl;

  if (e.target.value === "hd") {
    url = currentUrl.replace("sd", "hd");
  } else if (e.target.value === "sd") {
    url = currentUrl.replace("hd", "sd");
  }
  playChannel(url);
});

// Audio track selection
document.getElementById("audioSelect").addEventListener("change", (e) => {
  const player = document.getElementById("player");
  const tracks = player.audioTracks || [];
  if (tracks.length > 0) {
    if (e.target.value === "track1" && tracks[0]) tracks[0].enabled = true;
    if (e.target.value === "track2" && tracks[1]) tracks[1].enabled = true;
  }
});

document.getElementById("searchInput").addEventListener("input", renderChannels);
document.getElementById("categoryFilter").addEventListener("change", renderChannels);

document.addEventListener("DOMContentLoaded", loadM3U);
</script>
</body>
</html>
